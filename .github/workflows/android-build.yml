name: Android CI Build

on:
  push:
    branches: [ "**" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Prepare signing (optional)
        shell: bash
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [ -n "$KEYSTORE_BASE64" ] && [ -n "$KEYSTORE_PASSWORD" ] && [ -n "$KEY_ALIAS" ]; then
            echo "🔐 Detected signing secrets. Preparing keystore..."
            # Robust decode: avoid echo newline, ignore stray characters
            if ! printf '%s' "$KEYSTORE_BASE64" | base64 --decode --ignore-garbage > "$GITHUB_WORKSPACE/keystore.jks"; then
              echo "❌ Failed to decode KEYSTORE_BASE64. Please regenerate with no line wraps (see SIGNING_QUICK_START.md)."
              exit 1
            fi
            # Validate keystore
            if ! keytool -list -keystore "$GITHUB_WORKSPACE/keystore.jks" -storepass "$KEYSTORE_PASSWORD" > /dev/null 2>&1; then
              echo "❌ Keystore password may be incorrect. Validation failed."
              exit 1
            fi
            KEY_PASS_EFFECTIVE=${KEY_PASSWORD:-$KEYSTORE_PASSWORD}
            {
              echo "SIGNING_STORE_FILE=$GITHUB_WORKSPACE/keystore.jks"
              echo "SIGNING_STORE_PASSWORD=$KEYSTORE_PASSWORD"
              echo "SIGNING_KEY_ALIAS=$KEY_ALIAS"
              echo "SIGNING_KEY_PASSWORD=$KEY_PASS_EFFECTIVE"
            } >> "$GITHUB_ENV"
            echo "✅ Keystore ready. Release build will be signed."
          else
            echo "ℹ️  No signing secrets provided (or incomplete)."
          fi

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Select Gradle (wrapper or fallback)
        shell: bash
        run: |
          set -e
          if [ -x "./gradlew" ] && [ -f "gradle/wrapper/gradle-wrapper.jar" ]; then
            echo "Using Gradle Wrapper"
            echo "GRADLE_CMD=./gradlew" >> "$GITHUB_ENV"
          else
            echo "Gradle Wrapper missing. Downloading Gradle 8.7..."
            curl -sSL https://services.gradle.org/distributions/gradle-8.7-bin.zip -o gradle.zip
            unzip -q gradle.zip
            echo "GRADLE_CMD=$GITHUB_WORKSPACE/gradle-8.7/bin/gradle" >> "$GITHUB_ENV"
            echo "Using $GITHUB_WORKSPACE/gradle-8.7/bin/gradle"
          fi

      - name: Prepare test signing (no secrets)
        shell: bash
        run: |
          set -e
          # If previous step created keystore from Secrets, skip fallback
          if [ -f "$GITHUB_WORKSPACE/keystore.jks" ]; then
            echo "✅ Using Secrets-provided keystore; skipping test keystore."
            exit 0
          fi
          KEYSTORE_PATH="$GITHUB_WORKSPACE/release-test.jks"
          if [ ! -f "$KEYSTORE_PATH" ]; then
            echo "🔐 Generating test keystore (for CI signing)..."
            keytool -genkey -noprompt \
              -alias release \
              -dname "CN=CheckInMaster, OU=Dev, O=CheckInMaster, L=City, S=State, C=CN" \
              -keystore "$KEYSTORE_PATH" \
              -storepass 123456 \
              -keypass 123456 \
              -keyalg RSA \
              -keysize 2048 \
              -validity 36500
          fi
          {
            echo "SIGNING_STORE_FILE=$KEYSTORE_PATH"
            echo "SIGNING_STORE_PASSWORD=123456"
            echo "SIGNING_KEY_ALIAS=release"
            echo "SIGNING_KEY_PASSWORD=123456"
          } >> "$GITHUB_ENV"
          echo "✅ Test signing prepared: $KEYSTORE_PATH"

      - name: Build Release APK
        run: $GRADLE_CMD assembleRelease --stacktrace

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/app-release.apk

      - name: Publish GitHub Pre-Release (on branch push)
        if: startsWith(github.ref, 'refs/heads/')
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          name: Latest (${{ github.ref_name }}@${{ github.sha }})
          prerelease: true
          generate_release_notes: false
          files: |
            app/build/outputs/apk/release/app-release.apk

      - name: Publish GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          generate_release_notes: true
          files: |
            app/build/outputs/apk/release/app-release.apk
